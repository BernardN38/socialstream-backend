// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package posts

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO Posts(user_id,username,body,media_id) VALUES ($1,$2,$3,$4)
`

type CreatePostParams struct {
	UserID   int32         `json:"userId"`
	Username string        `json:"username"`
	Body     string        `json:"body"`
	MediaID  sql.NullInt32 `json:"mediaId"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.UserID,
		arg.Username,
		arg.Body,
		arg.MediaID,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1 AND user_id = $2
`

type DeletePostParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"userId"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.ExecContext(ctx, deletePost, arg.ID, arg.UserID)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, user_id, username, body, media_id, created_at FROM posts
`

func (q *Queries) GetAll(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Body,
			&i.MediaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT user_id FROM posts WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getPostPage = `-- name: GetPostPage :many
SELECT id, user_id, username, body, media_id, created_at FROM posts WHERE user_id = $1 ORDER BY id DESC LIMIT $2 OFFSET $3
`

type GetPostPageParams struct {
	UserID int32 `json:"userId"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPostPage(ctx context.Context, arg GetPostPageParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostPage, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Body,
			&i.MediaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
