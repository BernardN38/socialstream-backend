version: "3.8"

services:
  nginx:
    image: nginx:latest
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./dist:/usr/share/nginx/html
    ports:
      - "443:443"
      - "8080:8080"
    depends_on:
      - authentication-service

  minio:
    image: minio/minio
    command: server --address ":9000" --console-address ":9001" /data
    ports:
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    volumes:
      - ${PWD}/minio-data:/data

  postgres:
    image: postgres:14-alpine
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: always
    environment:
      - POSTGRES_USER=bernardn
      - POSTGRES_PASSWORD=password
      - APP_DB_USER=postgres
      - APP_DB_PASS=password
      - AUTH_DB_NAME=authentication_service
      - USER_DB_NAME=user_service
      - MEDIA_DB_NAME=media_service
      - PGUSER=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5438:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 128M
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  authentication-service:
    build:
      context: ../authentication_service
      dockerfile: ./authentication_service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=postgres password=password host=postgres dbname=authentication_service port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/auth/health"]
      interval: 30s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3

  user-service:
    build:
      context: ../user_service
      dockerfile: ./user_service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=postgres password=password host=postgres dbname=user_service port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      minioEndpoint: "minio:9000"
      minioAccessKeyID: RwPNkWfpHNYn7XGpwPEX
      minioSecretAccessKey: wLkmCQb3gMAMvwiprRYcbJlECZ6inr7SCb6IE1ia
      port: ":8080"
      rabbitmqUrl: "amqp://guest:guest@rabbitmq"
      minioBucketName: "user-service"
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  media-service:
    build:
      context: ../media_service
      dockerfile: ./media_service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=postgres password=password host=postgres dbname=media_service port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      minioEndpoint: "minio:9000"
      minioAccessKeyID: RwPNkWfpHNYn7XGpwPEX
      minioSecretAccessKey: wLkmCQb3gMAMvwiprRYcbJlECZ6inr7SCb6IE1ia
      minioBucketName: "media-service"
      port: ":8080"
      rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/media/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  image-proccessing-service:
    build:
      context: ../image_proccessing_service
      dockerfile: ./image-proccessing-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 4G
            reservations:
              cpus: "0.25"
              memory: 128M