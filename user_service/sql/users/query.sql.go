// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package users

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(user_id, username,email, firstname,lastname)
VALUES ($1, $2, $3, $4, $5) RETURNING user_id, username, email, firstname, lastname, profile_image_id
`

type CreateUserParams struct {
	UserID    int32  `json:"userId"`
	Username  string `json:"username"`
	Email     string `json:"email"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.ProfileImageID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, username, email, firstname, lastname, profile_image_id
FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, email, firstname, lastname, profile_image_id
FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserProfileImageByUserId = `-- name: GetUserProfileImageByUserId :one
SELECT profile_image_id
FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserProfileImageByUserId(ctx context.Context, userID int32) (uuid.NullUUID, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileImageByUserId, userID)
	var profile_image_id uuid.NullUUID
	err := row.Scan(&profile_image_id)
	return profile_image_id, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, username, email, firstname, lastname, profile_image_id
FROM users
ORDER BY user_id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET 
username = COALESCE(nullif($2, ''), username),
firstname = COALESCE(nullif($3, ''), firstname), 
lastname = COALESCE(nullif($4, ''),  lastname)
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID  int32       `json:"userId"`
	Column2 interface{} `json:"column2"`
	Column3 interface{} `json:"column3"`
	Column4 interface{} `json:"column4"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const updateUserProfileImage = `-- name: UpdateUserProfileImage :exec
UPDATE users SET profile_image_id = $2 WHERE user_id = $1
`

type UpdateUserProfileImageParams struct {
	UserID         int32         `json:"userId"`
	ProfileImageID uuid.NullUUID `json:"profileImageId"`
}

func (q *Queries) UpdateUserProfileImage(ctx context.Context, arg UpdateUserProfileImageParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfileImage, arg.UserID, arg.ProfileImageID)
	return err
}
